<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <!-- <link rel="icon" href="../../../../favicon.ico"> -->
    <title>Home page - Заявка</title>

    <% include ../../common/bootstrap_css.ejs %>
    <link href="/theme.css" rel="stylesheet">
    <link href="/bower_components/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css" rel="stylesheet">
</head>

<body>
    <% include ../../common/full_menu.ejs %>

    <div class="container">
        <div class="form-header">
            <h3>Заявка</h3>
            <% if (Object.keys(errors).length > 0) { %>
                <h3><span class="text-danger">Выявлены ошибки:</span></h3>
                <ul>
                    <% for (var key in errors) { %>
                        <li><span class="text-danger"><%= errors[key].msg %></span></li>
                    <% }; %>
                </ul>
            <% } %>
        </div>
        <form method="post" action="/applications/save" novalidate>
            <div class="well">
                <div class="card-body">
                    <input type="text" hidden id="documentId" name="documentId" value="<%= typeof data != 'undefined' ? data.documentId : '0' %>">
                    <input type="text" hidden id="cityId" name="cityId" value="<%= typeof data != 'undefined' ? data.cityId : '0' %>">
                    <input type="text" hidden id="streetId" name="streetId" value="<%= typeof data != 'undefined' ? data.streetId : '0' %>">
                    <input type="text" hidden id="houseId" name="houseId" value="<%= typeof data != 'undefined' ? data.houseId : '0' %>">
                    <input type="text" hidden id="performerId" name="performerId" value="<%= typeof data != 'undefined' ? data.performerId : '0' %>">
                    <input type="text" hidden id="faults" name="faults" value="<%= typeof data != 'undefined' ? data.faults : '0' %>">
                    <input type="text" hidden id="isDone" name="isDone" value="<%= typeof data != 'undefined' ? data.isDone : '0' %>">
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3 <%= errors.createDate ? 'has-error' : '' %>">
                                <label for="create_date" class="control-label">Создано</label>
                                <div class="input-group date" id='datetimepicker_create_date'>
                                    <input type="text" class="form-control" name="createDate" id="createDate" value="<%= typeof data !== 'undefined' ? moment(data.createDate).format( 'DD.MM.YYYY HH:mm' ) : moment(new Date()).format( 'DD.MM.YYYY HH:mm' )  %>">
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                <% if (errors.createDate) { %>
                                    <span class="help-block"><%= errors.createDate.msg  %></span>
                                <% } %>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-8 <%= errors.address ? 'has-error' : '' %>">
                            <div class="form-group">
                                <label class="control-label" for="address">Адрес</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="address" name="address" placeholder="" value="<%= typeof data !== 'undefined' ? data.address : '' %>">
                                    <span class="input-group-btn">
                                        <button class="btn btn-default" type="button" id="clearAddress">
                                            <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                                        </button>
                                    </span>
                                </div>
                                <% if (errors.address) { %>
                                    <span class="help-block"><%= errors.address.msg  %></span>
                                <% } %>
                            </div>
                        </div>
                        <div class="col-md-1 <%= errors.porch ? 'has-error' : '' %>">
                            <div class="form-group">
                                <label class="control-label" for="porch">Подъезд</label>
                                <input type="text" class="form-control" id="porch" name="porch" placeholder="" value="<%= typeof data !== 'undefined' ? data.porch : '' %>">
                                <% if (errors.porch) { %>
                                    <span class="help-block"><%= errors.porch.msg  %></span>
                                <% } %>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="control-label" for="phone">Телефон</label>
                                <input type="text" class="form-control" id="phone" name="phone" placeholder="" value="<%= typeof data !== 'undefined' ? data.phone : '' %>">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 <%= errors.faults ? 'has-error' : '' %>">
                            <table class="table table-bordered table-condensed" name="tableFaults" id="tableFaults">
                                <thead>
                                    <tr class="active">
                                        <th style="width: 90%; cursor: pointer;" class="text-left align-middle sort control-label">Неисправность</th>
                                        <th style="width: 10%;" class="text-center align-middle">Действия</th>
                                    </tr>
                                    <tr>
                                        <td colspan="2"><input type="text" class="form-control" id="fault" name="fault"
                                            placeholder="Введите неисправность" value=""></td>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% var table = []; %>

                                    <% if (typeof data !== 'undefined') { %>
                                    <%  table = JSON.parse(data.faults); %>
                                    <% } %>

                                    <% if (table.length > 0) { %>
                                        <% for (var ind = 0, max = table.length; ind < max; ind++) { %>
                                        <tr class="warning">
                                            <td><%= table[ind].value %></td>
                                            <td class="warning text-center deleteRow"><a href="#" class="btn btn-danger btn-xs"><span class="glyphicon glyphicon-minus" aria-hidden="true"></span></a></td>
                                        </tr>
                                        <% } %>
                                    <% } else { %>
                                    <tr>
                                        <td class="warning text-center align-middle" colspan="2">Нет данных</td>
                                    </tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-12 <%= errors.performer ? 'has-error' : '' %>">
                                <label class="control-label" for="performer">Исполнитель</label>
                                <input type="text" class="form-control" id="performer" name="performer" placeholder="Фамилия исполнителя"
                                    value="<%= typeof data !== 'undefined' ? data.performer : '' %>">
                                <% if (errors.performer) { %>
                                    <span class="help-block"><%= errors.performer.msg %></span>
                                <% } %>
                            </div>
                        </div>
                    </div>
                    <% if (data.isDone) { %>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3">
                                <label for="create_date" class="control-label">Выполнено</label>
                                <div class="input-group date" id='datetimepicker_close_date'>
                                    <input type="text" class="form-control" name="closeDate" id="closeDate" value="<%= typeof data !== 'undefined' ? moment(data.closeDate).format( 'DD.MM.YYYY HH:mm' ) : moment(new Date()).format( 'DD.MM.YYYY HH:mm' )  %>">
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <% } %>
                    <div class="row">
                        <div class="col-md-12">
                            <button type="submit" class="btn btn-success" id="save">Записать</button>
                            <% if (data.isDone) { %>
                                &nbsp;
                                <button type="submit" class="btn btn-info" id="move" name="move">Перенести в Текущие заявки</button>    
                            <% } %>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <script src="/bower_components/jquery/dist/jquery.min.js"></script>
    <script src="/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="/bower_components/moment/min/moment-with-locales.min.js"></script>
    <script src="/bower_components/bootstrap/js/transition.js"></script>
    <script src="/bower_components/bootstrap/js/collapse.js"></script>
    <script src="/bower_components/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js"></script>
    <script src="/bower_components/bootstrap3-typeahead/bootstrap3-typeahead.js"></script>

    <script>
        var dataTable = [];
        function applicationData() {
            this.address =  {
                cityId: 0,
                cityName: '',
                streetId: 0,
                streetName: '',
                houseId: 0,
                houseNumber: ''
            }

            this.clearHouse = function() {
                this.address.houseId = 0;
                this.address.houseNumber = '';
                $('#houseId').val(0);
            }

            this.clearStreet = function() {
                this.address.streetId = 0;
                this.address.streetName = '';
                this.clearHouse();
                $('#streetId').val(0);
                $('#houseId').val(0);
            }

            this.clearCity = function()  {
                this.cityId = 0;
                this.cityName = '';
                this.clearStreet();
                $('#cityId').val(0);
            }

            this.setCityId = function (cityId) {
                $('#cityId').val(cityId);
            }

            this.setStreetId = function (streetId) {
                $('#streetId').val(streetId);
            }

            this.setHouseId = function (houseId) {
                $('#houseId').val(houseId);
            }
        };

        var appData = new applicationData();

        $(document).ready(function () {

            $('[data-toggle="tooltip"]').tooltip();

            $('#datetimepicker_create_date').datetimepicker({
                locale: 'ru'
            });

            $('#datetimepicker_close_date').datetimepicker({
                locale: 'ru'
            });

            // autocomplete city + street + house
            $('#address').typeahead({
                items: 15,
                source: function (query, process) {
                    var results = [];
                    map = {};
                    $.ajax({
                        'url': '/applications/address_autocomplete',
                        'type': 'POST',
                        'contentType': 'application/json',
                        'data': JSON.stringify({
                            'suggestion': query,
                            'limit': 15
                        }),
                        success: function (datas) {
                            if ((typeof datas == 'object') && ('items' in datas) && ('level' in datas)) {
                                var level = datas.level;
                                var data = datas.items;
                                var text;
                                if (Array.isArray(data)) {
                                    data.forEach(function (item, index) {
                                        item.level = level;
                                        switch (level) {
                                            case 0:
                                                text = item.cityName;
                                                map[text] = item;
                                                results.push(text);
                                                break;
                                            case 1:
                                                text = item.cityName + ', ' + item.streetName;
                                                if (item.streetName.trim() !== '') {
                                                    map[text] = item;
                                                    results.push(text);
                                                }
                                                break;
                                            case 2:
                                                text = item.cityName + ', ' + item.streetName + ', ' + item.houseNumber;
                                                if (item.houseNumber.trim() !== '') {
                                                    map[text] = item;
                                                    results.push(text);
                                                }
                                                break;
                                            default:
                                        }
                                    });
                                }
                            }
                            process(results);
                        }
                    });
                },
                updater: function (element) {
                    var selectedElement = map[element];
                    switch (selectedElement.level) {
                        case 0:
                            appData.address.cityId = selectedElement.cityId;
                            appData.address.cityName = selectedElement.cityName;
                            appData.setCityId(selectedElement.cityId);
                            appData.clearStreet();
                            return selectedElement.cityName + ', ';
                        case 1:
                            appData.address.cityId = selectedElement.cityId;
                            appData.address.cityName = selectedElement.cityName;
                            appData.address.streetId = selectedElement.streetId;
                            appData.address.streetName = selectedElement.streetName;
                            appData.setCityId(selectedElement.cityId);
                            appData.setStreetId(selectedElement.streetId);
                            appData.clearHouse();
                            return selectedElement.cityName + ', ' + selectedElement.streetName + ', ';
                        case 2:
                            appData.address.cityId = selectedElement.cityId;
                            appData.address.cityName = selectedElement.cityName;
                            appData.address.streetId = selectedElement.streetId;
                            appData.address.streetName = selectedElement.streetName;
                            appData.address.houseId = selectedElement.houseId;
                            appData.address.houseNumber = selectedElement.houseNumber;
                            appData.setCityId(selectedElement.cityId);
                            appData.setStreetId(selectedElement.streetId);
                            appData.setHouseId(selectedElement.houseId);
                            return selectedElement.cityName + ', ' + selectedElement.streetName + ', ' + selectedElement.houseNumber;
                        default:
                            return selectedElement.cityName;
                    }
                }
            });

            $('#performer').typeahead({
                items: 15,
                source: function (query, process) {
                    var results = [];
                    map = {};
                    $.ajax({
                        'url': '/applications/search_performer',
                        'type': 'POST',
                        'contentType': 'application/json',
                        'data': JSON.stringify({
                            'suggestion': query,
                            'limit': 15
                        }),
                        success: function (datas) {
                            $.each(datas, function (i, result) {
                                map[result.value] = result;
                                results.push(result.value);
                            });
                            process(results);
                        }
                    });
                },
                updater: function (element) {
                    $('#performerId').val(map[element].id);
                    return element;
                }
            });

            $('#fault').typeahead({
                items: 15,
                minLength: 1,
                source: function (query, process) {
                    var results = [];
                    map = {};
                    $.ajax({
                        'url': '/applications/find_fault',
                        'type': 'POST',
                        'contentType': 'application/json',
                        'data': JSON.stringify({
                            'suggestion': query,
                            'limit': 15
                        }),
                        success: function (datas) {
                            $.each(datas, function (i, result) {
                                map[result.value] = result;
                                results.push(result.value);
                            });
                            process(results);
                        }
                    });
                },
                updater: function (element) {
                    dataTable.push(map[element]);

                    // https://stackoverflow.com/questions/15604122/jquery-delete-table-row
                    var firstRow = $('#tableFaults > tbody > tr:first');
                    try {
                        if ((typeof (firstRow) == 'object') && ('length' in firstRow) && (firstRow.length == 1)) {
                            // if (firstRow[0].cells[0].innerText.trim().tolowerCase() == 'нет данных')
                            if (firstRow[0].cells[0].colSpan == 2) {
                                firstRow.parent().remove();
                            }
                        }
                    }
                    catch (e) {
                        //
                    }

                    $('#tableFaults').last().append(
                        '<tr class="warning">' +
                        '<td>' + map[element].value + '</td>' +
                        '<td class="warning text-center deleteRow">' + '<a href="#" class="btn btn-danger btn-xs"><span class="glyphicon glyphicon-minus" aria-hidden="true"></span></a>' + '</td>' +
                        '</tr>'
                    );
                    //
                    $('#fault').focus().val('');
                    // return element;
                    $('#faults').val(JSON.stringify(dataTable));
                }
            });

            $('body').on('click', '.deleteRow', function () {
                dataTable = JSON.parse($('#faults').val());
                var tr = $(this).closest('tr');
                var rowIndex = tr.index();
                tr.remove();
                dataTable.splice(rowIndex, 1);
                $('#faults').val(JSON.stringify(dataTable));
            });

            var grid = document.getElementById('tableFaults');
            grid.onclick = function (e) {
                if (e.target.tagName != 'TH') return;
                var classList = e.target.className.split(' ');

                bySort = false;
                for (var i = 0; i < classList.length; i++) {
                    if (classList[i] === 'sort') {
                        bySort = true;
                        break;
                    }
                }

                if (bySort) {
                    sortGrid(e.target.cellIndex);
                }
            };

            function sortGrid(colNum, type) {
                var tbody = grid.getElementsByTagName('tbody')[0];
                var rowsArray = [].slice.call(tbody.rows);

                var compare = function (rowA, rowB) {
                    return rowA.cells[colNum].innerHTML > rowB.cells[colNum].innerHTML;
                };

                // сортировать
                rowsArray.sort(compare);

                // Убрать tbody из большого DOM документа для лучшей производительности
                grid.removeChild(tbody);

                // добавить результат в нужном порядке в TBODY
                // они автоматически будут убраны со старых мест и вставлены в правильном порядке
                for (var i = 0; i < rowsArray.length; i++) {
                    tbody.appendChild(rowsArray[i]);
                }
                grid.appendChild(tbody);
            }

        });
    </script>
</body>

</html>